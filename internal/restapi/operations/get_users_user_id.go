// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/abyssparanoia/application-boilerplate/internal/restapi/restmodels"
)

// GetUsersUserIDHandlerFunc turns a function with the right signature into a get users user id handler
type GetUsersUserIDHandlerFunc func(GetUsersUserIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersUserIDHandlerFunc) Handle(params GetUsersUserIDParams) middleware.Responder {
	return fn(params)
}

// GetUsersUserIDHandler interface for that can handle valid get users user id params
type GetUsersUserIDHandler interface {
	Handle(GetUsersUserIDParams) middleware.Responder
}

// NewGetUsersUserID creates a new http.Handler for the get users user id operation
func NewGetUsersUserID(ctx *middleware.Context, handler GetUsersUserIDHandler) *GetUsersUserID {
	return &GetUsersUserID{Context: ctx, Handler: handler}
}

/*GetUsersUserID swagger:route GET /users/{user_id} getUsersUserId

ユーザーの詳細情報を取得する

*/
type GetUsersUserID struct {
	Context *middleware.Context
	Handler GetUsersUserIDHandler
}

func (o *GetUsersUserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUsersUserIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUsersUserIDOKBody get users user ID o k body
//
// swagger:model GetUsersUserIDOKBody
type GetUsersUserIDOKBody struct {

	// user
	User *restmodels.UserV1 `json:"user,omitempty"`
}

// Validate validates this get users user ID o k body
func (o *GetUsersUserIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersUserIDOKBody) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUsersUserIdOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUsersUserIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsersUserIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetUsersUserIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
