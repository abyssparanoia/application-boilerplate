// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserV1 user
//
// swagger:model userV1
type UserV1 struct {

	// background image path
	// Required: true
	BackgroundImagePath *string `json:"backgroundImagePath"`

	// created at
	// Required: true
	CreatedAt *float64 `json:"created_at"`

	// deleted at
	DeletedAt float64 `json:"deleted_at,omitempty"`

	// display name
	// Required: true
	DisplayName *string `json:"display_name"`

	// email
	Email string `json:"email,omitempty"`

	// icon image path
	// Required: true
	IconImagePath *string `json:"iconImagePath"`

	// id
	// Required: true
	ID *string `json:"id"`

	// profile
	Profile string `json:"profile,omitempty"`

	// updated at
	// Required: true
	UpdatedAt *float64 `json:"updated_at"`
}

// Validate validates this user v1
func (m *UserV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackgroundImagePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconImagePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserV1) validateBackgroundImagePath(formats strfmt.Registry) error {

	if err := validate.Required("backgroundImagePath", "body", m.BackgroundImagePath); err != nil {
		return err
	}

	return nil
}

func (m *UserV1) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserV1) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *UserV1) validateIconImagePath(formats strfmt.Registry) error {

	if err := validate.Required("iconImagePath", "body", m.IconImagePath); err != nil {
		return err
	}

	return nil
}

func (m *UserV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserV1) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserV1) UnmarshalBinary(b []byte) error {
	var res UserV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
